#include <iostream>

using namespace std;
#include <iostream>
#include <queue>
#include <stack>
#include <bits/stdc++.h>
#include <vector>
#include <map>
using namespace std;

struct trieNode
{
  trieNode* child[26];
  bool isWordEnd;
};

trieNode* newNode()
{
    trieNode* tmp = new trieNode();
    tmp->isWordEnd = false;
    for(int i =0;i<26;i++)
    {
        tmp->child[i] = NULL;   
    }
    
    return tmp;
}

void InsertTrieNode(trieNode* root, string str)
{
    trieNode *tmpRoot = root;

    for(int i = 0;i<str.length();i++)
    {
        int index = str[i] - 'a';
        if(!tmpRoot->child[index])
        tmpRoot->child[index] = newNode();
        
       tmpRoot =  tmpRoot->child[index];
        
                    
    }
    
    tmpRoot->isWordEnd = true;
}

bool searchWordInDis(trieNode* root , string str)
{
    
    if(root == NULL)
    return false;
    
    for(int i =0 ; i<str.length();i++)
    {
        
        int index = str[i] - 'a';
        
        if(!root->child[index])
        return false;
        
        root = root->child[index];
    }
    
    return (root != NULL && root->isWordEnd);
}

bool checkEndOfWord(trieNode* root)
{
    if(root == NULL)
       return true;
       
     for(int i = 0;i<26;i++)
     {
         if(root->child[i])
            return false;
     }
    
    return true;
}
trieNode* removeWord(trieNode* root ,  string str , int depth = 0)
{
    
    if(root == NULL)
       return NULL;
       
    if(depth == str.length())
    {
        
        if(root->isWordEnd)
            root->isWordEnd = false;
    
        if(checkEndOfWord(root))
        {
           delete root;
           root = NULL;
        }
            
        return root;
    }
    
    int index = str[depth] - 'a';
    root->child[index] = removeWord(root->child[index]  ,str,depth+1 );
    
        if(checkEndOfWord(root) && root->isWordEnd == false)
        {
           delete root;
           root = NULL;
        } 
        
        
        return root;
    
}
int main()
{

    trieNode* root = newNode();
    InsertTrieNode(root , "rakesh");
    
    std::cout << " "<<searchWordInDis(root ,"rakesh") << std::endl;


    root = removeWord(root , "rakesh");
    
    
    std::cout << " jj "<<searchWordInDis(root ,"rakesh") << std::endl;

    return 0;
}
