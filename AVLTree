/******************************************************************************
Find more detail on @equalConnect Coach youtube

*******************************************************************************/

#include <iostream>
using namespace std;

struct node
{
  int key;
  node* left;
  node* right;
  int height;
};

node* newNode(int key)
{
    node* newPtr = new node();
    newPtr->key = key;
    newPtr->right = NULL;
    newPtr->left = NULL;
    newPtr->height = 1;
}
int max(int height1 , int height2)
{
    if(height1 > height2)
      return height1;
    else
      return height2;
}
int height(node *root)
{
    if(root == NULL)
       return 0;
    return root->height;
}
int getBalaceFactor(node* root)
{
    if(root == NULL)
    return 0;
    
    return height(root->left) - height(root->right);
}

node* rightRotate(node* root)
{
    if(root == NULL)
      return NULL;
    
    node* tmpLeft   = root->left;
    node* tmpChRight = tmpLeft->right;
    tmpLeft->right = root;
    root->left = tmpChRight;
    root->height = max(height(root->left) , height(root->right)) + 1;
    
    tmpLeft->height = max(height(tmpLeft->left) , height(tmpLeft->right)) + 1;
    
    
    return tmpLeft;
    
}

node* leftRotate(node* root)
{
    if(root == NULL)
      return NULL;
      
    node* tmpRight = root->right;
    node* tmpChLeft = tmpRight->left;
    
    tmpRight->left = root;
    root->right = tmpChLeft;
    root->height = max(height(root->left) , height(root->right)) + 1;
    tmpChLeft->height  = max(height(tmpChLeft->left) , height(tmpChLeft->right)) + 1;
    
    return tmpRight;
}

node* insert(node* root , int key)
{
    if(root == NULL)
    return newNode(key);
    
    if(key > root->key)
       root->right = insert(root->right , key);
    else if(key < root->key)
       root->left = insert(root->left , key); 
    else
       return root;
    
    root->height = max(height(root->left) , height(root->right))+1; 
    
    
    int balFactor = getBalaceFactor(root);
    
    
    if(balFactor > 1 && key < root->left->key)
       return rightRotate(root);
    else if( balFactor < -1 && key > root->right->key)
       return leftRotate(root);
    else if( balFactor > 1 && key > root->left->key  )
    {
         root->left = leftRotate(root->left);
         return rightRotate(root);
    }
    else if( balFactor < -1 && key < root->right->key)  
    {
       root->right = rightRotate(root->right);
       return leftRotate(root);
    }  
       return root;
}


int main()
{
    cout<<"Hello World";

    return 0;
}
